# JWT Authentication API Example Requests
# Use this with REST client extensions like REST Client for VS Code

### Register a new customer
POST http://localhost:3000/api/api/auth/register/customer
Content-Type: application/json

{
  "email": "customer@example.com",
  "password": "password123",
  "firstName": "John",
  "lastName": "Doe"
}

### Register a new restaurant owner (automatically creates restaurant)
POST http://localhost:3000/api/auth/register/restaurant-owner
Content-Type: application/json

{
  "email": "owner@example.com",
  "password": "password123",
  "firstName": "Jane",
  "lastName": "Smith",
  "restaurantName": "Delicious Bites",
  "restaurantDescription": "The best Italian food in town",
  "restaurantAddress": "123 Main Street, City, State 12345",
  "restaurantPhone": "+1-555-0123",
  "restaurantCuisine": "Italian"
}

### Login
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "owner@example.com",
  "password": "password123"
}

### Get user profile (requires authentication)
GET http://localhost:3000/api/auth/profile
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Update my restaurant (requires restaurant owner role)
PATCH http://localhost:3000/api/restaurants/my/restaurant
Content-Type: application/json
Authorization: Bearer YOUR_JWT_TOKEN_HERE

{
  "name": "Updated Restaurant Name",
  "description": "Updated description with new specialties",
  "address": "456 New Street, City, State 12345",
  "phone": "+1-555-9999",
  "cuisine": "Modern Italian"
}

### Get all restaurants (public)
GET http://localhost:3000/api/restaurants

### Get my restaurant (requires restaurant owner role)
GET http://localhost:3000/api/restaurants/my/restaurant
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Upload restaurant profile image (requires restaurant owner role)
POST http://localhost:3000/api/restaurants/my/restaurant/upload-image
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="file"; filename="restaurant-image.jpg"
Content-Type: image/jpeg

< ./path-to-your-image.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### Delete restaurant profile image (requires restaurant owner role)
DELETE http://localhost:3000/api/restaurants/my/restaurant/image
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Delete my restaurant (requires restaurant owner role)
DELETE http://localhost:3000/api/restaurants/my/restaurant
Authorization: Bearer YOUR_JWT_TOKEN_HERE

## MEAL ENDPOINTS

### Get all meals with pagination and filtering (public)
GET http://localhost:3000/api/meals?page=1&limit=10&search=pizza&isAvailable=true&minPrice=10&maxPrice=50&sortBy=price&sortOrder=ASC

### Get meal by ID (public)
GET http://localhost:3000/api/meals/1

### Get my restaurant meals (requires restaurant owner role)
GET http://localhost:3000/api/meals/my/meals?page=1&limit=10&search=pizza&isAvailable=true
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Create a new meal (requires restaurant owner role)
POST http://localhost:3000/api/meals
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: application/json

{
  "name": "Margherita Pizza",
  "description": "Fresh tomatoes, mozzarella cheese, and basil on a crispy crust",
  "price": 15.99,
  "isAvailable": true
}

### Update a meal (requires restaurant owner role)
PATCH http://localhost:3000/api/meals/1
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: application/json

{
  "name": "Updated Margherita Pizza",
  "description": "Updated description with premium ingredients",
  "price": 17.99,
  "isAvailable": true
}

### Upload meal image (requires restaurant owner role)
POST http://localhost:3000/api/meals/1/upload-image
Authorization: Bearer YOUR_JWT_TOKEN_HERE
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="file"; filename="meal-image.jpg"
Content-Type: image/jpeg

< ./path-to-your-meal-image.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### Delete meal image (requires restaurant owner role)
DELETE http://localhost:3000/api/meals/1/image
Authorization: Bearer YOUR_JWT_TOKEN_HERE

### Delete a meal (requires restaurant owner role)
DELETE http://localhost:3000/api/meals/1
Authorization: Bearer YOUR_JWT_TOKEN_HERE
